// @ts-nocheck
import { Ionicons } from '@expo/vector-icons';
import React, { useState } from 'react';
import {
    Alert,
    Keyboard,
    KeyboardAvoidingView,
    Platform,
    SafeAreaView,
    ScrollView,
    StyleSheet,
    Text,
    TextInput,
    TouchableOpacity,
    TouchableWithoutFeedback,
    View
} from 'react-native';
import API_URL from '../../config/api';
import { useAuth } from '../AuthContext';

export default function PostListingScreen() {
    const { accessToken } = useAuth();
    const [formData, setFormData] = useState({
        title: '',
        description: '',
        price: '',
        category: 'vehicle',
        brand: '',
        model: '',
        year: '',
        condition: 'new',
        imagesInput: '',
        specifications: {
            batteryCapacity: '',
            range: '',
            chargingTime: '',
            power: '',
            weight: '',
            dimensions: '',
            batteryType: '',
            voltage: '',
            capacity: '',
            cycleLife: '',
            operatingTemperature: '',
            warranty: '',
            compatibility: ''
        }
    });

    const updateFormData = (field, value) => {
        setFormData(prev => ({ ...prev, [field]: value }));
    };

    const handleSubmit = async () => {
        if (!formData.title || !formData.price) {
            Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ v√† gi√° b√°n');
            return;
        }
        const yearNum = formData.year ? Number(formData.year) : undefined;
        const priceNum = Number(String(formData.price).replace(/[^0-9.]/g, ''));
        if (Number.isNaN(priceNum)) {
            Alert.alert('L·ªói', 'Gi√° kh√¥ng h·ª£p l·ªá');
            return;
        }
        const images = (formData.imagesInput || '')
          .split(',')
          .map(s => s.trim())
          .filter(Boolean);
        const payload: any = {
            title: formData.title,
            description: formData.description,
            price: priceNum,
            category: 'vehicle',
            brand: formData.brand || undefined,
            model: formData.model || undefined,
            year: yearNum || undefined,
            condition: formData.condition,
            images,
            specifications: { ...formData.specifications },
        };
        try {
            const res = await fetch(`${API_URL}/api/products`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    ...(accessToken ? { Authorization: `Bearer ${accessToken}` } : {}),
                },
                body: JSON.stringify(payload),
            });
            const raw = await res.text();
            let data: any = {};
            try { data = raw ? JSON.parse(raw) : {}; } catch {}
            if (!res.ok) {
                throw new Error(data?.message || 'Kh√¥ng th·ªÉ t·∫°o s·∫£n ph·∫©m');
            }
            Alert.alert('Th√†nh c√¥ng', 'Tin ƒëƒÉng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng');
        } catch (e: any) {
            Alert.alert('L·ªói', e?.message || 'C√≥ l·ªói x·∫£y ra');
        }
    };

    const handleAIPriceSuggestion = () => {
        if (!formData.brand || !formData.model) {
            Alert.alert(
                'Th√¥ng tin thi·∫øu',
                'Vui l√≤ng nh·∫≠p Th∆∞∆°ng hi·ªáu v√† Model tr∆∞·ªõc khi d√πng AI g·ª£i √Ω gi√°.'
            );
            return;
        }

        // Simulate AI processing
        Alert.alert(
            'AI ƒëang ph√¢n t√≠ch...',
            'Vui l√≤ng ch·ªù √≠t gi√¢y ƒë·ªÉ AI ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† ƒë∆∞a ra g·ª£i √Ω gi√°.',
            [
                {
                    text: 'H·ªßy',
                    style: 'cancel'
                },
                {
                    text: 'ƒê·ªìng √Ω',
                    onPress: () => {
                        // Simulate AI price suggestion based on category and vehicle type
                        setTimeout(() => {
                            let suggestedPrice = '';
                            const brand = (formData.brand || '').toLowerCase();
                            const model = (formData.model || '').toLowerCase();
                            
                            // AI price logic simulation
                            if (brand.includes('vinfast')) suggestedPrice = '35,000,000';
                            else if (brand.includes('honda')) suggestedPrice = '28,000,000';
                            else if (brand.includes('yamaha')) suggestedPrice = '25,000,000';
                            else if (brand.includes('tesla')) suggestedPrice = '2,300,000,000';
                            else if (brand.includes('byd')) suggestedPrice = '1,700,000,000';
                            else suggestedPrice = '50,000,000';

                            Alert.alert(
                                'ü§ñ AI G·ª£i √Ω gi√°',
                                `D·ª±a tr√™n ph√¢n t√≠ch th·ªã tr∆∞·ªùng hi·ªán t·∫°i:\n\nüí∞ Gi√° ƒë·ªÅ xu·∫•t: ${suggestedPrice} VNƒê\n\nüìà ƒê√¢y l√† m·ª©c gi√° c·∫°nh tranh d·ª±a tr√™n c√°c s·∫£n ph·∫©m t∆∞∆°ng t·ª± ƒëang b√°n tr√™n th·ªã tr∆∞·ªùng.\n\nB·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng gi√° n√†y kh√¥ng?`,
                                [
                                    {
                                        text: 'Kh√¥ng, c·∫£m ∆°n',
                                        style: 'cancel'
                                    },
                                    {
                                        text: 'S·ª≠ d·ª•ng gi√° n√†y',
                                        onPress: () => {
                                            updateFormData('price', suggestedPrice);
                                            Alert.alert('‚úÖ Th√†nh c√¥ng', 'Gi√° AI g·ª£i √Ω ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng!');
                                        }
                                    }
                                ]
                            );
                        }, 1500); // Simulate AI processing time
                    }
                }
            ]
        );
    };

    const dismissKeyboard = () => {
        Keyboard.dismiss();
    };

    const renderInput = (label, value, onChange, required = false, keyboardType = 'default', placeholder) => (
        <View style={styles.inputGroup}>
            <Text style={styles.label}>
                {label} {required && <Text style={styles.required}>*</Text>}
            </Text>
            <TextInput
                style={styles.input}
                placeholder={placeholder || label}
                placeholderTextColor="#999"
                value={value}
                onChangeText={onChange}
                keyboardType={keyboardType}
            />
        </View>
    );

    return (
        <TouchableWithoutFeedback onPress={dismissKeyboard}>
            <SafeAreaView style={styles.container}>
                {/* Header */}
                <View style={styles.header}>
                    <TouchableOpacity>
                        <Ionicons name="close" size={24} color="#000" />
                    </TouchableOpacity>
                    <Text style={styles.headerTitle}>ƒêƒÉng tin</Text>
                    <TouchableOpacity style={styles.saveButton}>
                        <Text style={styles.saveButtonText}>L∆∞u nh√°p</Text>
                    </TouchableOpacity>
                </View>

                <KeyboardAvoidingView
                    style={styles.keyboardAvoid}
                    behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
                    keyboardVerticalOffset={Platform.OS === 'ios' ? 0 : 0}
                >
                    <ScrollView
                        style={styles.content}
                        showsVerticalScrollIndicator={false}
                        keyboardShouldPersistTaps="handled"
                    >
                        {/* Info Section */}
                        <View style={styles.section}>
                            <Text style={styles.sectionTitle}>TH√îNG TIN S·∫¢N PH·∫®M</Text>
                            <Text style={styles.infoText}>ƒêi·ªÅn c√°c th√¥ng tin c∆° b·∫£n c·ªßa s·∫£n ph·∫©m.</Text>
                        </View>

                        {/* Image Upload */}
                        <View style={styles.section}>
                            <View style={styles.imageInfo}>
                                <Ionicons name="information-circle" size={20} color="#007AFF" />
                                <Text style={styles.imageInfoText}>H√¨nh ·∫£nh h·ª£p l·ªá</Text>
                            </View>
                            <TouchableOpacity style={styles.imageUpload}>
                                <Ionicons name="camera" size={48} color="#FFD700" />
                                <Text style={styles.imageUploadText}>ƒêƒÇNG T·ª™ 01 ƒê·∫æN 06 H√åNH</Text>
                            </TouchableOpacity>
                        </View>

                        {/* Core Fields */}
                        <View style={styles.section}>
                            {renderInput('Ti√™u ƒë·ªÅ', formData.title, (t) => updateFormData('title', t), true, 'default', 'VD: Tesla Model 3 2023...')}
                            {renderInput('M√¥ t·∫£', formData.description, (t) => updateFormData('description', t), false, 'default', 'M√¥ t·∫£ chi ti·∫øt...')}
                            <View style={styles.inputGroup}>
                                <Text style={styles.label}>Gi√° (VND) <Text style={styles.required}>*</Text></Text>
                                <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>
                                    <TextInput
                                        style={[styles.input, { flex: 1 }]}
                                        placeholder="Nh·∫≠p gi√° b√°n"
                                        placeholderTextColor="#999"
                                        value={String(formData.price)}
                                        onChangeText={(t) => updateFormData('price', t)}
                                        keyboardType="numeric"
                                    />
                                    <TouchableOpacity 
                                        style={[styles.aiButton, { height: 44 }]} 
                                        onPress={handleAIPriceSuggestion}
                                    >
                                        <Ionicons name="sparkles" size={16} color="#FF6B35" />
                                        <Text style={styles.aiButtonText}>AI gi√°</Text>
                                    </TouchableOpacity>
                                </View>
                            </View>
                            {renderInput('Th∆∞∆°ng hi·ªáu', formData.brand, (t) => updateFormData('brand', t))}
                            {renderInput('Model', formData.model, (t) => updateFormData('model', t))}
                            {renderInput('NƒÉm', formData.year, (t) => updateFormData('year', t), false, 'numeric')}

                            <Text style={styles.label}>T√¨nh tr·∫°ng</Text>
                            <View style={styles.conditionButtons}>
                                <TouchableOpacity
                                    style={[styles.conditionButton, formData.condition === 'new' && styles.activeCondition]}
                                    onPress={() => updateFormData('condition', 'new')}
                                >
                                    <Text style={[styles.conditionText, formData.condition === 'new' && styles.activeConditionText]}>M·ªõi</Text>
                                </TouchableOpacity>
                                <TouchableOpacity
                                    style={[styles.conditionButton, formData.condition === 'used' && styles.activeCondition]}
                                    onPress={() => updateFormData('condition', 'used')}
                                >
                                    <Text style={[styles.conditionText, formData.condition === 'used' && styles.activeConditionText]}>ƒê√£ qua s·ª≠ d·ª•ng</Text>
                                </TouchableOpacity>
                            </View>

                            {renderInput('·∫¢nh (URL, c√°ch nhau b·ªüi d·∫•u ph·∫©y)', formData.imagesInput, (t) => updateFormData('imagesInput', t), false, 'default', 'https://..., https://...')}
                        </View>

                        {/* Specifications */}
                        <View style={styles.section}>
                            <Text style={styles.sectionTitle}>TH√îNG S·ªê K·ª∏ THU·∫¨T</Text>
                            {renderInput('Dung l∆∞·ª£ng pin', formData.specifications.batteryCapacity, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, batteryCapacity: t } })))}
                            {renderInput('Qu√£ng ƒë∆∞·ªùng', formData.specifications.range, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, range: t } })))}
                            {renderInput('Th·ªùi gian s·∫°c', formData.specifications.chargingTime, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, chargingTime: t } })))}
                            {renderInput('C√¥ng su·∫•t', formData.specifications.power, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, power: t } })))}
                            {renderInput('Kh·ªëi l∆∞·ª£ng', formData.specifications.weight, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, weight: t } })))}
                            {renderInput('K√≠ch th∆∞·ªõc', formData.specifications.dimensions, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, dimensions: t } })))}
                            {renderInput('Lo·∫°i pin', formData.specifications.batteryType, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, batteryType: t } })))}
                            {renderInput('ƒêi·ªán √°p', formData.specifications.voltage, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, voltage: t } })))}
                            {renderInput('Dung l∆∞·ª£ng', formData.specifications.capacity, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, capacity: t } })))}
                            {renderInput('Chu k·ª≥ s·∫°c', formData.specifications.cycleLife, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, cycleLife: t } })))}
                            {renderInput('Nhi·ªát ƒë·ªô ho·∫°t ƒë·ªông', formData.specifications.operatingTemperature, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, operatingTemperature: t } })))}
                            {renderInput('B·∫£o h√†nh', formData.specifications.warranty, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, warranty: t } })))}
                            {renderInput('T∆∞∆°ng th√≠ch', formData.specifications.compatibility, (t) => setFormData(prev => ({ ...prev, specifications: { ...prev.specifications, compatibility: t } })))}
                        </View>

                        {/* Submit */}
                        <View style={styles.section}>
                            <View style={styles.priceHeader}>
                                <TouchableOpacity 
                                    style={styles.aiButton}
                                    onPress={handleAIPriceSuggestion}
                                >
                                    <Ionicons name="sparkles" size={16} color="#FF6B35" />
                                    <Text style={styles.aiButtonText}>AI g·ª£i √Ω gi√°</Text>
                                </TouchableOpacity>
                            </View>
                            <View style={styles.buttonSection}>
                                <TouchableOpacity style={styles.previewButton}>
                                    <Text style={styles.previewButtonText}>Xem tr∆∞·ªõc</Text>
                                </TouchableOpacity>
                                <TouchableOpacity style={styles.submitButton} onPress={handleSubmit}>
                                    <Text style={styles.submitButtonText}>ƒêƒÉng tin</Text>
                                </TouchableOpacity>
                            </View>
                        </View>


                        
                    </ScrollView>
                </KeyboardAvoidingView>
            </SafeAreaView>
        </TouchableWithoutFeedback>
    );
}


const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
    },
    keyboardAvoid: {
        flex: 1,
    },
    header: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingHorizontal: 16,
        paddingVertical: 12,
        borderBottomWidth: 1,
        borderBottomColor: '#f0f0f0',

    },
    headerTitle: {
        fontSize: 18,
        fontWeight: 'bold',
        color: '#000',
        paddingLeft: 50,
    },
    saveButton: {
        paddingHorizontal: 12,
        paddingVertical: 6,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 6,
    },
    saveButtonText: {
        fontSize: 14,
        color: '#666',
    },
    content: {
        flex: 1,
        backgroundColor: '#f5f5f5',
    },
    section: {
        backgroundColor: '#fff',
        padding: 16,
        marginBottom: 8,
    },
    sectionTitle: {
        fontSize: 14,
        fontWeight: '600',
        color: '#666',
        marginBottom: 16,
    },
    infoText: {
        fontSize: 14,
        color: '#666',
        lineHeight: 20,
    },
    link: {
        color: '#007AFF',
        textDecorationLine: 'underline',
    },
    imageInfo: {
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 16,
    },
    imageInfoText: {
        fontSize: 14,
        color: '#007AFF',
        marginLeft: 8,
    },
    imageUpload: {
        borderWidth: 2,
        borderColor: '#FFD700',
        borderStyle: 'dashed',
        borderRadius: 8,
        padding: 32,
        alignItems: 'center',
    },
    imageUploadText: {
        fontSize: 14,
        fontWeight: '600',
        color: '#000',
        marginTop: 8,
    },
    conditionButtons: {
        flexDirection: 'row',
        gap: 12,
    },
    conditionButton: {
        flex: 1,
        paddingVertical: 12,
        paddingHorizontal: 16,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 8,
        alignItems: 'center',
    },
    activeCondition: {
        backgroundColor: '#FFD700',
        borderColor: '#FFD700',
    },
    conditionText: {
        fontSize: 14,
        color: '#666',
        fontWeight: '500',
    },
    activeConditionText: {
        color: '#000',
        fontWeight: '600',
    },
    inputGroup: {
        marginBottom: 16,
    },
    label: {
        fontSize: 15,
        fontWeight: '600',
        color: '#000',
        marginBottom: 8,
    },
    required: {
        color: '#FF3333',
        fontWeight: 'bold',
    },
    dropdown: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingHorizontal: 16,
        paddingVertical: 12,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 8,
        backgroundColor: '#fff',
    },
    dropdownText: {
        fontSize: 16,
        color: '#000',
    },
    placeholder: {
        color: '#999',
    },
    input: {
        paddingHorizontal: 16,
        paddingVertical: 12,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 8,
        fontSize: 16,
        color: '#000000',
        backgroundColor: '#ffffff',
        fontWeight: '500',
    },
    textArea: {
        height: 120,
        textAlignVertical: 'top',
    },
    charCount: {
        fontSize: 12,
        color: '#999',
        textAlign: 'right',
        marginTop: 4,
    },
    sellerButtons: {
        flexDirection: 'row',
        gap: 12,
    },
    sellerButton: {
        flex: 1,
        paddingVertical: 12,
        paddingHorizontal: 16,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 8,
        alignItems: 'center',
    },
    activeSellerButton: {
        backgroundColor: '#FFD700',
        borderColor: '#FFD700',
    },
    sellerButtonText: {
        fontSize: 14,
        color: '#666',
        fontWeight: '500',
    },
    activeSellerButtonText: {
        color: '#000',
        fontWeight: '600',
    },
    buttonSection: {
        flexDirection: 'row',
        padding: 16,
        gap: 12,
        backgroundColor: '#fff',
        marginBottom: 100,
    },
    previewButton: {
        flex: 1,
        paddingVertical: 14,
        borderWidth: 1,
        borderColor: '#ddd',
        borderRadius: 8,
        alignItems: 'center',
    },
    previewButtonText: {
        fontSize: 16,
        color: '#666',
        fontWeight: '500',
    },
    submitButton: {
        flex: 1,
        paddingVertical: 14,
        backgroundColor: '#FFD700',
        borderRadius: 8,
        alignItems: 'center',
    },
    submitButtonText: {
        fontSize: 16,
        color: '#000',
        fontWeight: '600',
    },
    priceHeader: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: 8,
    },
    aiButton: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#FFF5F0',
        paddingHorizontal: 12,
        paddingVertical: 6,
        borderRadius: 16,
        borderWidth: 1,
        borderColor: '#FF6B35',
    },
    aiButtonText: {
        fontSize: 12,
        color: '#FF6B35',
        fontWeight: '600',
        marginLeft: 4,
    },
});
